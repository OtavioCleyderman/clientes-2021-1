{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Otavio\\\\Documents\\\\GitHub\\\\clientes-2021-1\\\\clientes\\\\src\\\\routed\\\\ClientesForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputMask from 'react-input-mask';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    maxWidth: '80%',\n    margin: '0 auto',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      margin: '0 24px 24px 0'\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-around',\n    marginTop: '36px'\n  },\n  importado: {\n    '& .MuiFormControlLabel-root': {\n      display: 'block'\n    }\n  }\n}));\nexport default function ClientesForm() {\n  _s();\n\n  const classes = useStyles();\n  const ufs = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']; // Classes de caracters para a máscara da placa\n  // somente dígitos ~> [0-9]\n\n  const formatChars = {\n    '0': '[0-9]'\n  }; // Máscara para CPF\n\n  const cpfMask = '000.000.000-00'; // Máscara para RG\n\n  const rgMask = '00.000.000'; // Máscara para o telefone\n\n  const telMask = '(00)0000-0000';\n  const [cliente, setCliente] = useState({\n    id: null,\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',\n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio: '',\n    uf: '',\n    telefone: '',\n    email: ''\n  });\n  const [sendBtnStatus, setSendBtnStatus] = useState({\n    disabled: false,\n    label: 'Enviar'\n  });\n  const [sbStatus, setSbStatus] = useState({\n    open: false,\n    severity: 'success',\n    message: ''\n  });\n  const [error, setError] = useState({\n    nome: '',\n    cpf: '',\n    rg: '',\n    logradouro: '',\n    num_imovel: '',\n    complemento: '',\n    bairro: '',\n    municipio: '',\n    uf: '',\n    telefone: '',\n    email: ''\n  });\n  const [isModified, setIsModified] = useState(false);\n  const [title, setTitle] = useState('Cadastrar novo cliente');\n  const history = useHistory();\n  const params = useParams(); // useEffect() para quando o formulário for carregado (só na inicialização)\n\n  useEffect(() => {\n    // Verificamos se a rota atual contém o parâmetro id\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\n    if (params.id) {\n      setTitle('Editar cliente');\n      getData(params.id);\n    }\n  }, []);\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/clientes/${id}`);\n      setCliente(response.data);\n    } catch (error) {\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: \"Não foi possível carregar os dados para edição.\"\n      });\n    }\n  }\n\n  const [dialogOpen, setDialogOpen] = useState(false); // O diálogo de confirmação está aberto?\n\n  function handleInputChange(event, property) {\n    const clienteTemp = { ...cliente\n    };\n    if (event.target.id) property = event.target.id;\n    setCliente(clienteTemp);\n    setIsModified(true); // O formulário foi modificado\n\n    validate(clienteTemp); // Dispara a validação\n  }\n\n  function validate(data) {\n    let isValid = true;\n    const errorTemp = {\n      nome: '',\n      cpf: '',\n      rg: '',\n      logradouro: '',\n      num_imovel: '',\n      complemento: '',\n      bairro: '',\n      municipio: '',\n      uf: '',\n      telefone: '',\n      email: ''\n    }; // trim(): retira espaços em branco do início e do final de uma string\n\n    if (data.nome.trim() === '') {\n      errorTemp.nome = 'O nome deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.logradouro.trim() === '') {\n      errorTemp.logradouro = 'O logradouro deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.num_imovel.trim() === '') {\n      errorTemp.num_imovel = 'O número do imóvel deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.bairro.trim() === '') {\n      errorTemp.bairro = 'O bairro deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.municipio.trim() === '') {\n      errorTemp.municipio = 'O município deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.uf.trim() === '') {\n      errorTemp.uf = 'A UF deve ser informada';\n      isValid = false;\n    } // O CPF não pode ser string vazia nem conter sublinhado\n\n\n    if (data.cpf.trim() === '' || data.cpf.includes('_')) {\n      errorTemp.cpf = 'O CPF deve ser preenchido corretamente';\n      isValid = false;\n    } // O RG não pode ser string vazia nem conter sublinhado\n\n\n    if (data.rg.trim() === '' || data.rg.includes('_')) {\n      errorTemp.rg = 'O RG deve ser preenchido corretamente';\n      isValid = false;\n    } // O telefone não pode ser string vazia nem conter sublinhado\n\n\n    if (data.telefone.trim() === '' || data.telefone.includes('_')) {\n      errorTemp.telefone = 'O telefone deve ser preenchido corretamente';\n      isValid = false;\n    }\n\n    if (data.email.trim() === '') {\n      errorTemp.email = 'O e-mail deve ser preenchido';\n      isValid = false;\n    }\n\n    setError(errorTemp);\n    return isValid;\n  }\n\n  async function saveData() {\n    try {\n      // Desabilita o botão de enviar para evitar envios duplicados\n      setSendBtnStatus({\n        disabled: true,\n        label: 'Enviando...'\n      }); // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\n\n      if (params.id) await axios.put(`https://api.faustocintra.com.br/clientes/${params.id}`, cliente); // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado será o POST\n      else await axios.post('https://api.faustocintra.com.br/clientes', cliente); // Mostra a SnackBar\n\n      setSbStatus({\n        open: true,\n        severity: 'success',\n        message: 'Dados salvos com sucesso!'\n      });\n    } catch (error) {\n      // Mostra a SnackBar\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'ERRO: ' + error.message\n      });\n    } // Restaura o estado inicial do botão de envio\n\n\n    setSendBtnStatus({\n      disabled: false,\n      label: 'Enviar'\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault(); // Evita que a página seja recarregada\n    // Só envia para o banco de dados se o formulário for válido\n\n    if (validate(cliente)) saveData();\n  }\n\n  function handleSbClose() {\n    setSbStatus({ ...sbStatus,\n      open: false\n    }); // Retorna para a página de listagem em caso de sucesso\n\n    if (sbStatus.severity === 'success') history.push('/list');\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false); // Se o usuário realmente deseja voltar\n\n    if (result) history.push('/list');\n  }\n\n  function handleGoBack() {\n    // se o formulário tiver sido modificado, exibimos o diálogo de confirmação\n    if (isModified) setDialogOpen(true); // Senão, podemos voltar diretamente para a listagem\n    else history.push('/list');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      isOpen: dialogOpen,\n      onClose: handleDialogClose,\n      children: \"H\\xE1 dados n\\xE3o salvos. Deseja realmente voltar?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: sbStatus.open,\n      autoHideDuration: 6000,\n      onClose: handleSbClose,\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        elevation: 6,\n        variant: \"filled\",\n        onClose: handleSbClose,\n        severity: sbStatus.severity,\n        children: sbStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"nome\",\n        label: \"Nome\",\n        variant: \"filled\",\n        value: cliente.nome,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o nome do cliente\",\n        fullWidth: true,\n        error: error.nome !== '',\n        helperText: error.nome\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputMask, {\n        id: \"cpf\",\n        mask: cpfMask,\n        formatChars: formatChars,\n        value: cliente.cpf,\n        onChange: event => handleInputChange(event, 'cpf'),\n        children: () => /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"CPF\",\n          variant: \"filled\",\n          required: true\n          /* not null, precisa ser preenchido */\n          ,\n          placeholder: \"Informe o CPF do cliente\",\n          fullWidth: true,\n          error: error.cpf !== '',\n          helperText: error.cpf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputMask, {\n        id: \"rg\",\n        mask: rgMask,\n        formatChars: formatChars,\n        value: cliente.rg,\n        onChange: event => handleInputChange(event, 'rg'),\n        children: () => /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"RG\",\n          variant: \"filled\",\n          required: true\n          /* not null, precisa ser preenchido */\n          ,\n          placeholder: \"Informe o RG do cliente\",\n          fullWidth: true,\n          error: error.rg !== '',\n          helperText: error.rg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"logradouro\",\n        label: \"Logradouro\",\n        variant: \"filled\",\n        value: cliente.logradouro,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o logradouro do cliente\",\n        fullWidth: true,\n        error: error.logradouro !== '',\n        helperText: error.logradouro\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"num_imovel\",\n        label: \"N\\xFAmero do im\\xF3vel\",\n        variant: \"filled\",\n        value: cliente.num_imovel,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o n\\xFAmero do im\\xF3vel\",\n        fullWidth: true,\n        error: error.num_imovel !== '',\n        helperText: error.num_imovel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"complemento\",\n        label: \"Complemento\",\n        variant: \"filled\",\n        value: cliente.complemento,\n        onChange: handleInputChange,\n        placeholder: \"Informe o Complemento, se houver\",\n        fullWidth: true,\n        error: error.complemento !== '',\n        helperText: error.complemento\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"bairro\",\n        label: \"Bairro\",\n        variant: \"filled\",\n        value: cliente.bairro,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o bairro\",\n        fullWidth: true,\n        error: error.bairro !== '',\n        helperText: error.bairro\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"municipio\",\n        label: \"Munic\\xEDpio\",\n        variant: \"filled\",\n        value: cliente.municipio,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o munic\\xEDpio\",\n        fullWidth: true,\n        error: error.municipio !== '',\n        helperText: error.municipio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"uf\",\n        label: \"UF\",\n        variant: \"filled\",\n        value: cliente.uf,\n        onChange: event => handleInputChange(event, 'uf'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe a UF do munic\\xEDpio\",\n        select: true,\n        fullWidth: true,\n        error: error.uf !== '',\n        helperText: error.uf,\n        children: ufs.map(uf => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: uf,\n          children: uf\n        }, uf, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 26\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputMask, {\n        id: \"telefone\",\n        mask: telMask,\n        formatChars: formatChars,\n        value: cliente.telefone,\n        onChange: event => handleInputChange(event, 'telefone'),\n        children: () => /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"telefone\",\n          variant: \"filled\",\n          required: true\n          /* not null, precisa ser preenchido */\n          ,\n          placeholder: \"Informe o telefone do cliente\",\n          fullWidth: true,\n          error: error.telefone !== '',\n          helperText: error.telefone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"email\",\n        label: \"E-mail\",\n        variant: \"filled\",\n        value: cliente.email,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o e-mail do cliente\",\n        fullWidth: true,\n        error: error.email !== '',\n        helperText: error.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolbar,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: sendBtnStatus.disabled,\n          children: sendBtnStatus.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleGoBack,\n          children: \"Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClientesForm, \"j/BG3FPe8orwKEkL6sdeH6x5ozM=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c = ClientesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientesForm\");","map":{"version":3,"sources":["C:/Users/Otavio/Documents/GitHub/clientes-2021-1/clientes/src/routed/ClientesForm.js"],"names":["useState","useEffect","TextField","MenuItem","FormControl","FormControlLabel","Checkbox","InputMask","makeStyles","InputAdornment","Toolbar","Button","axios","useHistory","useParams","Snackbar","MuiAlert","ConfirmDialog","React","useStyles","theme","form","display","justifyContent","flexWrap","maxWidth","margin","minWidth","toolbar","width","marginTop","importado","ClientesForm","classes","ufs","formatChars","cpfMask","rgMask","telMask","cliente","setCliente","id","nome","cpf","rg","logradouro","num_imovel","complemento","bairro","municipio","uf","telefone","email","sendBtnStatus","setSendBtnStatus","disabled","label","sbStatus","setSbStatus","open","severity","message","error","setError","isModified","setIsModified","title","setTitle","history","params","getData","response","get","data","dialogOpen","setDialogOpen","handleInputChange","event","property","clienteTemp","target","validate","isValid","errorTemp","trim","includes","saveData","put","post","handleSubmit","preventDefault","handleSbClose","push","handleDialogClose","result","handleGoBack","map"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAS,GAAGX,UAAU,CAACY,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,cAAc,EAAE,cAFZ;AAGJC,IAAAA,QAAQ,EAAE,MAHN;AAIJC,IAAAA,QAAQ,EAAE,KAJN;AAKJC,IAAAA,MAAM,EAAE,QALJ;AAMJ,8BAA0B;AACxBC,MAAAA,QAAQ,EAAE,OADc;AAExBF,MAAAA,QAAQ,EAAE,OAFc;AAGxBC,MAAAA,MAAM,EAAE;AAHgB;AANtB,GAD+B;AAarCE,EAAAA,OAAO,EAAE;AACPN,IAAAA,OAAO,EAAE,MADF;AAEPO,IAAAA,KAAK,EAAE,MAFA;AAGPN,IAAAA,cAAc,EAAE,cAHT;AAIPO,IAAAA,SAAS,EAAE;AAJJ,GAb4B;AAmBrCC,EAAAA,SAAS,EAAE;AACT,mCAA+B;AAC7BT,MAAAA,OAAO,EAAE;AADoB;AADtB;AAnB0B,CAAL,CAAN,CAA5B;AA2BA,eAAe,SAASU,YAAT,GAAwB;AAAA;;AACrC,QAAMC,OAAO,GAAGd,SAAS,EAAzB;AAEA,QAAMe,GAAG,GAAG,CACV,IADU,EAEV,IAFU,EAGV,IAHU,EAIV,IAJU,EAKV,IALU,EAMV,IANU,EAOV,IAPU,EAQV,IARU,EASV,IATU,EAUV,IAVU,EAWV,IAXU,EAYV,IAZU,EAaV,IAbU,EAcV,IAdU,EAeV,IAfU,EAgBV,IAhBU,EAiBV,IAjBU,EAkBV,IAlBU,EAmBV,IAnBU,EAoBV,IApBU,EAqBV,IArBU,EAsBV,IAtBU,EAuBV,IAvBU,EAwBV,IAxBU,EAyBV,IAzBU,EA0BV,IA1BU,EA2BV,IA3BU,CAAZ,CAHqC,CAkCrC;AACA;;AACA,QAAMC,WAAW,GAAG;AAClB,SAAK;AADa,GAApB,CApCqC,CAwCrC;;AACA,QAAMC,OAAO,GAAG,gBAAhB,CAzCqC,CA0CrC;;AACA,QAAMC,MAAM,GAAG,YAAf,CA3CqC,CA4CrC;;AACA,QAAMC,OAAO,GAAG,eAAhB;AAMA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBxC,QAAQ,CAAC;AACrCyC,IAAAA,EAAE,EAAE,IADiC;AAErCC,IAAAA,IAAI,EAAE,EAF+B;AAGrCC,IAAAA,GAAG,EAAE,EAHgC;AAIrCC,IAAAA,EAAE,EAAE,EAJiC;AAKrCC,IAAAA,UAAU,EAAE,EALyB;AAMrCC,IAAAA,UAAU,EAAE,EANyB;AAOrCC,IAAAA,WAAW,EAAE,EAPwB;AAQrCC,IAAAA,MAAM,EAAE,EAR6B;AASrCC,IAAAA,SAAS,EAAE,EAT0B;AAUrCC,IAAAA,EAAE,EAAE,EAViC;AAWrCC,IAAAA,QAAQ,EAAE,EAX2B;AAYrCC,IAAAA,KAAK,EAAE;AAZ8B,GAAD,CAAtC;AAiBA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCtD,QAAQ,CAAC;AACjDuD,IAAAA,QAAQ,EAAE,KADuC;AAEjDC,IAAAA,KAAK,EAAE;AAF0C,GAAD,CAAlD;AAKA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1D,QAAQ,CAAC;AACvC2D,IAAAA,IAAI,EAAE,KADiC;AAEvCC,IAAAA,QAAQ,EAAE,SAF6B;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB/D,QAAQ,CAAC;AACjC0C,IAAAA,IAAI,EAAE,EAD2B;AAEjCC,IAAAA,GAAG,EAAE,EAF4B;AAGjCC,IAAAA,EAAE,EAAE,EAH6B;AAIjCC,IAAAA,UAAU,EAAE,EAJqB;AAKjCC,IAAAA,UAAU,EAAE,EALqB;AAMjCC,IAAAA,WAAW,EAAE,EANoB;AAOjCC,IAAAA,MAAM,EAAE,EAPyB;AAQjCC,IAAAA,SAAS,EAAE,EARsB;AASjCC,IAAAA,EAAE,EAAE,EAT6B;AAUjCC,IAAAA,QAAQ,EAAE,EAVuB;AAWjCC,IAAAA,KAAK,EAAE;AAX0B,GAAD,CAAlC;AAcA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8BjE,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAM,CAACkE,KAAD,EAAQC,QAAR,IAAoBnE,QAAQ,CAAC,wBAAD,CAAlC;AAEA,QAAMoE,OAAO,GAAGvD,UAAU,EAA1B;AACA,QAAMwD,MAAM,GAAGvD,SAAS,EAAxB,CAlGqC,CAoGrC;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAIoE,MAAM,CAAC5B,EAAX,EAAe;AACb0B,MAAAA,QAAQ,CAAC,gBAAD,CAAR;AACAG,MAAAA,OAAO,CAACD,MAAM,CAAC5B,EAAR,CAAP;AACD;AACF,GAPQ,EAON,EAPM,CAAT;;AASA,iBAAe6B,OAAf,CAAuB7B,EAAvB,EAA2B;AACzB,QAAI;AACF,UAAI8B,QAAQ,GAAG,MAAM3D,KAAK,CAAC4D,GAAN,CAAW,4CAA2C/B,EAAG,EAAzD,CAArB;AACAD,MAAAA,UAAU,CAAC+B,QAAQ,CAACE,IAAV,CAAV;AACD,KAHD,CAIA,OAAOX,KAAP,EAAc;AACZJ,MAAAA,WAAW,CAAC;AACVC,QAAAA,IAAI,EAAE,IADI;AAEVC,QAAAA,QAAQ,EAAE,OAFA;AAGVC,QAAAA,OAAO,EAAE;AAHC,OAAD,CAAX;AAKD;AACF;;AAED,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8B3E,QAAQ,CAAC,KAAD,CAA5C,CA5HqC,CA4He;;AAGpD,WAAS4E,iBAAT,CAA2BC,KAA3B,EAAkCC,QAAlC,EAA4C;AAE1C,UAAMC,WAAW,GAAG,EAAE,GAAGxC;AAAL,KAApB;AAGA,QAAIsC,KAAK,CAACG,MAAN,CAAavC,EAAjB,EAAqBqC,QAAQ,GAAGD,KAAK,CAACG,MAAN,CAAavC,EAAxB;AAErBD,IAAAA,UAAU,CAACuC,WAAD,CAAV;AACAd,IAAAA,aAAa,CAAC,IAAD,CAAb,CAR0C,CAQpB;;AACtBgB,IAAAA,QAAQ,CAACF,WAAD,CAAR,CAT0C,CASnB;AACxB;;AAED,WAASE,QAAT,CAAkBR,IAAlB,EAAwB;AACtB,QAAIS,OAAO,GAAG,IAAd;AAEA,UAAMC,SAAS,GAAG;AAChBzC,MAAAA,IAAI,EAAE,EADU;AAEhBC,MAAAA,GAAG,EAAE,EAFW;AAGhBC,MAAAA,EAAE,EAAE,EAHY;AAIhBC,MAAAA,UAAU,EAAE,EAJI;AAKhBC,MAAAA,UAAU,EAAE,EALI;AAMhBC,MAAAA,WAAW,EAAE,EANG;AAOhBC,MAAAA,MAAM,EAAE,EAPQ;AAQhBC,MAAAA,SAAS,EAAE,EARK;AAShBC,MAAAA,EAAE,EAAE,EATY;AAUhBC,MAAAA,QAAQ,EAAE,EAVM;AAWhBC,MAAAA,KAAK,EAAE;AAXS,KAAlB,CAHsB,CAiBtB;;AACA,QAAIqB,IAAI,CAAC/B,IAAL,CAAU0C,IAAV,OAAqB,EAAzB,EAA6B;AAC3BD,MAAAA,SAAS,CAACzC,IAAV,GAAiB,4BAAjB;AACAwC,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAAC5B,UAAL,CAAgBuC,IAAhB,OAA2B,EAA/B,EAAmC;AACjCD,MAAAA,SAAS,CAACtC,UAAV,GAAuB,kCAAvB;AACAqC,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAAC3B,UAAL,CAAgBsC,IAAhB,OAA2B,EAA/B,EAAmC;AACjCD,MAAAA,SAAS,CAACrC,UAAV,GAAuB,wCAAvB;AACAoC,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAACzB,MAAL,CAAYoC,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BD,MAAAA,SAAS,CAACnC,MAAV,GAAmB,8BAAnB;AACAkC,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAACxB,SAAL,CAAemC,IAAf,OAA0B,EAA9B,EAAkC;AAChCD,MAAAA,SAAS,CAAClC,SAAV,GAAsB,iCAAtB;AACAiC,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAACvB,EAAL,CAAQkC,IAAR,OAAmB,EAAvB,EAA2B;AACzBD,MAAAA,SAAS,CAACjC,EAAV,GAAe,yBAAf;AACAgC,MAAAA,OAAO,GAAG,KAAV;AACD,KA9CqB,CAgDtB;;;AACA,QAAIT,IAAI,CAAC9B,GAAL,CAASyC,IAAT,OAAoB,EAApB,IAA0BX,IAAI,CAAC9B,GAAL,CAAS0C,QAAT,CAAkB,GAAlB,CAA9B,EAAsD;AACpDF,MAAAA,SAAS,CAACxC,GAAV,GAAgB,wCAAhB;AACAuC,MAAAA,OAAO,GAAG,KAAV;AACD,KApDqB,CAsDtB;;;AACA,QAAIT,IAAI,CAAC7B,EAAL,CAAQwC,IAAR,OAAmB,EAAnB,IAAyBX,IAAI,CAAC7B,EAAL,CAAQyC,QAAR,CAAiB,GAAjB,CAA7B,EAAoD;AAClDF,MAAAA,SAAS,CAACvC,EAAV,GAAe,uCAAf;AACAsC,MAAAA,OAAO,GAAG,KAAV;AACD,KA1DqB,CA4DtB;;;AACA,QAAIT,IAAI,CAACtB,QAAL,CAAciC,IAAd,OAAyB,EAAzB,IAA+BX,IAAI,CAACtB,QAAL,CAAckC,QAAd,CAAuB,GAAvB,CAAnC,EAAgE;AAC9DF,MAAAA,SAAS,CAAChC,QAAV,GAAqB,6CAArB;AACA+B,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,QAAIT,IAAI,CAACrB,KAAL,CAAWgC,IAAX,OAAsB,EAA1B,EAA8B;AAC5BD,MAAAA,SAAS,CAAC/B,KAAV,GAAkB,8BAAlB;AACA8B,MAAAA,OAAO,GAAG,KAAV;AACD;;AAEDnB,IAAAA,QAAQ,CAACoB,SAAD,CAAR;AACA,WAAOD,OAAP;AACD;;AAED,iBAAeI,QAAf,GAA0B;AACxB,QAAI;AACF;AACAhC,MAAAA,gBAAgB,CAAC;AAAEC,QAAAA,QAAQ,EAAE,IAAZ;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAAD,CAAhB,CAFE,CAIF;;AACA,UAAIa,MAAM,CAAC5B,EAAX,EAAe,MAAM7B,KAAK,CAAC2E,GAAN,CAAW,4CAA2ClB,MAAM,CAAC5B,EAAG,EAAhE,EAAmEF,OAAnE,CAAN,CAAf,CACA;AADA,WAEK,MAAM3B,KAAK,CAAC4E,IAAN,CAAW,0CAAX,EAAuDjD,OAAvD,CAAN,CAPH,CASF;;AACAmB,MAAAA,WAAW,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,QAAQ,EAAE,SAAxB;AAAmCC,QAAAA,OAAO,EAAE;AAA5C,OAAD,CAAX;AAED,KAZD,CAaA,OAAOC,KAAP,EAAc;AACZ;AACAJ,MAAAA,WAAW,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,QAAQ,EAAE,OAAxB;AAAiCC,QAAAA,OAAO,EAAE,WAAWC,KAAK,CAACD;AAA3D,OAAD,CAAX;AACD,KAjBuB,CAkBxB;;;AACAP,IAAAA,gBAAgB,CAAC;AAAEC,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAD,CAAhB;AACD;;AAED,WAASiC,YAAT,CAAsBZ,KAAtB,EAA6B;AAE3BA,IAAAA,KAAK,CAACa,cAAN,GAF2B,CAED;AAE1B;;AACA,QAAIT,QAAQ,CAAC1C,OAAD,CAAZ,EAAuB+C,QAAQ;AAEhC;;AAED,WAASK,aAAT,GAAyB;AACvBjC,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,IAAI,EAAE;AAArB,KAAD,CAAX,CADuB,CAGvB;;AACA,QAAIF,QAAQ,CAACG,QAAT,KAAsB,SAA1B,EAAqCQ,OAAO,CAACwB,IAAR,CAAa,OAAb;AACtC;;AAED,WAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACjCnB,IAAAA,aAAa,CAAC,KAAD,CAAb,CADiC,CAGjC;;AACA,QAAImB,MAAJ,EAAY1B,OAAO,CAACwB,IAAR,CAAa,OAAb;AACb;;AAED,WAASG,YAAT,GAAwB;AACtB;AACA,QAAI/B,UAAJ,EAAgBW,aAAa,CAAC,IAAD,CAAb,CAAhB,CACA;AADA,SAEKP,OAAO,CAACwB,IAAR,CAAa,OAAb;AACN;;AAED,sBACE;AAAA,4BACE,QAAC,aAAD;AAAe,MAAA,MAAM,EAAElB,UAAvB;AAAmC,MAAA,OAAO,EAAEmB,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEpC,QAAQ,CAACE,IAAzB;AAA+B,MAAA,gBAAgB,EAAE,IAAjD;AAAuD,MAAA,OAAO,EAAEgC,aAAhE;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,SAAS,EAAE,CAArB;AAAwB,QAAA,OAAO,EAAC,QAAhC;AAAyC,QAAA,OAAO,EAAEA,aAAlD;AAAiE,QAAA,QAAQ,EAAElC,QAAQ,CAACG,QAApF;AAAA,kBACGH,QAAQ,CAACI;AADZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eAWE;AAAA,gBAAKK;AAAL;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAM,MAAA,SAAS,EAAEjC,OAAO,CAACZ,IAAzB;AAA+B,MAAA,QAAQ,EAAEoE,YAAzC;AAAA,8BAEE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAElD,OAAO,CAACG,IAJjB;AAKE,QAAA,QAAQ,EAAEkC,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,2BAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAACpB,IAAN,KAAe,EATxB;AAUE,QAAA,UAAU,EAAEoB,KAAK,CAACpB;AAVpB;AAAA;AAAA;AAAA;AAAA,cAFF,eAeE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,KADL;AAEE,QAAA,IAAI,EAAEN,OAFR;AAGE,QAAA,WAAW,EAAED,WAHf;AAIE,QAAA,KAAK,EAAEI,OAAO,CAACI,GAJjB;AAKE,QAAA,QAAQ,EAAGkC,KAAD,IAAWD,iBAAiB,CAACC,KAAD,EAAQ,KAAR,CALxC;AAAA,kBAOG,mBAAM,QAAC,SAAD;AACL,UAAA,KAAK,EAAC,KADD;AAEL,UAAA,OAAO,EAAC,QAFH;AAGL,UAAA,QAAQ;AAAE;AAHL;AAIL,UAAA,WAAW,EAAC,0BAJP;AAKL,UAAA,SAAS,MALJ;AAML,UAAA,KAAK,EAAEf,KAAK,CAACnB,GAAN,KAAc,EANhB;AAOL,UAAA,UAAU,EAAEmB,KAAK,CAACnB;AAPb;AAAA;AAAA;AAAA;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA,cAfF,eAiCE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,IADL;AAEE,QAAA,IAAI,EAAEN,MAFR;AAGE,QAAA,WAAW,EAAEF,WAHf;AAIE,QAAA,KAAK,EAAEI,OAAO,CAACK,EAJjB;AAKE,QAAA,QAAQ,EAAGiC,KAAD,IAAWD,iBAAiB,CAACC,KAAD,EAAQ,IAAR,CALxC;AAAA,kBAOG,mBAAM,QAAC,SAAD;AACL,UAAA,KAAK,EAAC,IADD;AAEL,UAAA,OAAO,EAAC,QAFH;AAGL,UAAA,QAAQ;AAAE;AAHL;AAIL,UAAA,WAAW,EAAC,yBAJP;AAKL,UAAA,SAAS,MALJ;AAML,UAAA,KAAK,EAAEf,KAAK,CAAClB,EAAN,KAAa,EANf;AAOL,UAAA,UAAU,EAAEkB,KAAK,CAAClB;AAPb;AAAA;AAAA;AAAA;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA,cAjCF,eAmDE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,KAAK,EAAC,YAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAEL,OAAO,CAACM,UAJjB;AAKE,QAAA,QAAQ,EAAE+B,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,iCAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAACjB,UAAN,KAAqB,EAT9B;AAUE,QAAA,UAAU,EAAEiB,KAAK,CAACjB;AAVpB;AAAA;AAAA;AAAA;AAAA,cAnDF,eAgEE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,KAAK,EAAC,wBAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAEN,OAAO,CAACO,UAJjB;AAKE,QAAA,QAAQ,EAAE8B,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,kCAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAAChB,UAAN,KAAqB,EAT9B;AAUE,QAAA,UAAU,EAAEgB,KAAK,CAAChB;AAVpB;AAAA;AAAA;AAAA;AAAA,cAhEF,eA6EE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,aADL;AAEE,QAAA,KAAK,EAAC,aAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAEP,OAAO,CAACQ,WAJjB;AAKE,QAAA,QAAQ,EAAE6B,iBALZ;AAME,QAAA,WAAW,EAAC,kCANd;AAOE,QAAA,SAAS,MAPX;AAQE,QAAA,KAAK,EAAEd,KAAK,CAACf,WAAN,KAAsB,EAR/B;AASE,QAAA,UAAU,EAAEe,KAAK,CAACf;AATpB;AAAA;AAAA;AAAA;AAAA,cA7EF,eAyFE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,QADL;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAER,OAAO,CAACS,MAJjB;AAKE,QAAA,QAAQ,EAAE4B,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,kBAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAACd,MAAN,KAAiB,EAT1B;AAUE,QAAA,UAAU,EAAEc,KAAK,CAACd;AAVpB;AAAA;AAAA;AAAA;AAAA,cAzFF,eAsGE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,WADL;AAEE,QAAA,KAAK,EAAC,cAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAET,OAAO,CAACU,SAJjB;AAKE,QAAA,QAAQ,EAAE2B,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,wBAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAACb,SAAN,KAAoB,EAT7B;AAUE,QAAA,UAAU,EAAEa,KAAK,CAACb;AAVpB;AAAA;AAAA;AAAA;AAAA,cAtGF,eAmHE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,IADL;AAEE,QAAA,KAAK,EAAC,IAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAEV,OAAO,CAACW,EAJjB;AAKE,QAAA,QAAQ,EAAE2B,KAAK,IAAID,iBAAiB,CAACC,KAAD,EAAQ,IAAR,CALtC;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,8BAPd;AAQE,QAAA,MAAM,MARR;AASE,QAAA,SAAS,MATX;AAUE,QAAA,KAAK,EAAEf,KAAK,CAACZ,EAAN,KAAa,EAVtB;AAWE,QAAA,UAAU,EAAEY,KAAK,CAACZ,EAXpB;AAAA,kBAaGhB,GAAG,CAAC8D,GAAJ,CAAQ9C,EAAE,iBAAI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEA,EAAjB;AAAA,oBAA+BA;AAA/B,WAA0BA,EAA1B;AAAA;AAAA;AAAA;AAAA,gBAAd;AAbH;AAAA;AAAA;AAAA;AAAA,cAnHF,eAoIE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,UADL;AAEE,QAAA,IAAI,EAAEZ,OAFR;AAGE,QAAA,WAAW,EAAEH,WAHf;AAIE,QAAA,KAAK,EAAEI,OAAO,CAACY,QAJjB;AAKE,QAAA,QAAQ,EAAG0B,KAAD,IAAWD,iBAAiB,CAACC,KAAD,EAAQ,UAAR,CALxC;AAAA,kBAOG,mBAAM,QAAC,SAAD;AACL,UAAA,KAAK,EAAC,UADD;AAEL,UAAA,OAAO,EAAC,QAFH;AAGL,UAAA,QAAQ;AAAE;AAHL;AAIL,UAAA,WAAW,EAAC,+BAJP;AAKL,UAAA,SAAS,MALJ;AAML,UAAA,KAAK,EAAEf,KAAK,CAACX,QAAN,KAAmB,EANrB;AAOL,UAAA,UAAU,EAAEW,KAAK,CAACX;AAPb;AAAA;AAAA;AAAA;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA,cApIF,eAsJE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,KAAK,EAAEZ,OAAO,CAACa,KAJjB;AAKE,QAAA,QAAQ,EAAEwB,iBALZ;AAME,QAAA,QAAQ;AAAE;AANZ;AAOE,QAAA,WAAW,EAAC,6BAPd;AAQE,QAAA,SAAS,MARX;AASE,QAAA,KAAK,EAAEd,KAAK,CAACV,KAAN,KAAgB,EATzB;AAUE,QAAA,UAAU,EAAEU,KAAK,CAACV;AAVpB;AAAA;AAAA;AAAA;AAAA,cAtJF,eAmKE,QAAC,OAAD;AAAS,QAAA,SAAS,EAAEnB,OAAO,CAACL,OAA5B;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAC,WAA9B;AAA0C,UAAA,KAAK,EAAC,WAAhD;AAA4D,UAAA,QAAQ,EAAEyB,aAAa,CAACE,QAApF;AAAA,oBACGF,aAAa,CAACG;AADjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAEuC,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnKF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA,kBADF;AAmMD;;GA7cuB/D,Y;UACNb,S,EAgGAN,U,EACDC,S;;;KAlGOkB,Y","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputMask from 'react-input-mask'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Button from '@material-ui/core/Button'\r\nimport axios from 'axios'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert from '@material-ui/lab/Alert'\r\nimport ConfirmDialog from '../ui/ConfirmDialog'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  form: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    flexWrap: 'wrap',\r\n    maxWidth: '80%',\r\n    margin: '0 auto',\r\n    '& .MuiFormControl-root': {\r\n      minWidth: '200px',\r\n      maxWidth: '500px',\r\n      margin: '0 24px 24px 0'\r\n    }\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    width: '100%',\r\n    justifyContent: 'space-around',\r\n    marginTop: '36px'\r\n  },\r\n  importado: {\r\n    '& .MuiFormControlLabel-root': {\r\n      display: 'block'\r\n    }\r\n  }\r\n\r\n}))\r\n\r\nexport default function ClientesForm() {\r\n  const classes = useStyles()\r\n\r\n  const ufs = [\r\n    'AC',\r\n    'AL',\r\n    'AP',\r\n    'AM',\r\n    'BA',\r\n    'CE',\r\n    'DF',\r\n    'ES',\r\n    'GO',\r\n    'MA',\r\n    'MT',\r\n    'MS',\r\n    'MG',\r\n    'PA',\r\n    'PB',\r\n    'PR',\r\n    'PE',\r\n    'PI',\r\n    'RJ',\r\n    'RN',\r\n    'RS',\r\n    'RO',\r\n    'RR',\r\n    'SC',\r\n    'SP',\r\n    'SE',\r\n    'TO',\r\n  ]\r\n\r\n\r\n  // Classes de caracters para a máscara da placa\r\n  // somente dígitos ~> [0-9]\r\n  const formatChars = {\r\n    '0': '[0-9]',\r\n  }\r\n\r\n  // Máscara para CPF\r\n  const cpfMask = '000.000.000-00'\r\n  // Máscara para RG\r\n  const rgMask = '00.000.000'\r\n  // Máscara para o telefone\r\n  const telMask = '(00)0000-0000'\r\n\r\n\r\n\r\n\r\n\r\n  const [cliente, setCliente] = useState({\r\n    id: null,\r\n    nome: '',\r\n    cpf: '',\r\n    rg: '',\r\n    logradouro: '',\r\n    num_imovel: '',\r\n    complemento: '',\r\n    bairro: '',\r\n    municipio: '',\r\n    uf: '',\r\n    telefone: '',\r\n    email: '',\r\n  })\r\n\r\n\r\n\r\n  const [sendBtnStatus, setSendBtnStatus] = useState({\r\n    disabled: false,\r\n    label: 'Enviar'\r\n  })\r\n\r\n  const [sbStatus, setSbStatus] = useState({\r\n    open: false,\r\n    severity: 'success',\r\n    message: ''\r\n  })\r\n\r\n  const [error, setError] = useState({\r\n    nome: '',\r\n    cpf: '',\r\n    rg: '',\r\n    logradouro: '',\r\n    num_imovel: '',\r\n    complemento: '',\r\n    bairro: '',\r\n    municipio: '',\r\n    uf: '',\r\n    telefone: '',\r\n    email: '',\r\n  })\r\n\r\n  const [isModified, setIsModified] = useState(false)\r\n\r\n  const [title, setTitle] = useState('Cadastrar novo cliente')\r\n\r\n  const history = useHistory()\r\n  const params = useParams()\r\n\r\n  // useEffect() para quando o formulário for carregado (só na inicialização)\r\n  useEffect(() => {\r\n    // Verificamos se a rota atual contém o parâmetro id\r\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\r\n    if (params.id) {\r\n      setTitle('Editar cliente')\r\n      getData(params.id)\r\n    }\r\n  }, [])\r\n\r\n  async function getData(id) {\r\n    try {\r\n      let response = await axios.get(`https://api.faustocintra.com.br/clientes/${id}`)\r\n      setCliente(response.data)\r\n    }\r\n    catch (error) {\r\n      setSbStatus({\r\n        open: true,\r\n        severity: 'error',\r\n        message: \"Não foi possível carregar os dados para edição.\"\r\n      })\r\n    }\r\n  }\r\n\r\n  const [dialogOpen, setDialogOpen] = useState(false) // O diálogo de confirmação está aberto?\r\n\r\n\r\n  function handleInputChange(event, property) {\r\n\r\n    const clienteTemp = { ...cliente }\r\n\r\n\r\n    if (event.target.id) property = event.target.id\r\n\r\n    setCliente(clienteTemp)\r\n    setIsModified(true)   // O formulário foi modificado\r\n    validate(clienteTemp)  // Dispara a validação\r\n  }\r\n\r\n  function validate(data) {\r\n    let isValid = true\r\n\r\n    const errorTemp = {\r\n      nome: '',\r\n      cpf: '',\r\n      rg: '',\r\n      logradouro: '',\r\n      num_imovel: '',\r\n      complemento: '',\r\n      bairro: '',\r\n      municipio: '',\r\n      uf: '',\r\n      telefone: '',\r\n      email: '',\r\n    }\r\n\r\n    // trim(): retira espaços em branco do início e do final de uma string\r\n    if (data.nome.trim() === '') {\r\n      errorTemp.nome = 'O nome deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.logradouro.trim() === '') {\r\n      errorTemp.logradouro = 'O logradouro deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.num_imovel.trim() === '') {\r\n      errorTemp.num_imovel = 'O número do imóvel deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.bairro.trim() === '') {\r\n      errorTemp.bairro = 'O bairro deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.municipio.trim() === '') {\r\n      errorTemp.municipio = 'O município deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.uf.trim() === '') {\r\n      errorTemp.uf = 'A UF deve ser informada'\r\n      isValid = false\r\n    }\r\n\r\n    // O CPF não pode ser string vazia nem conter sublinhado\r\n    if (data.cpf.trim() === '' || data.cpf.includes('_')) {\r\n      errorTemp.cpf = 'O CPF deve ser preenchido corretamente'\r\n      isValid = false\r\n    }\r\n\r\n    // O RG não pode ser string vazia nem conter sublinhado\r\n    if (data.rg.trim() === '' || data.rg.includes('_')) {\r\n      errorTemp.rg = 'O RG deve ser preenchido corretamente'\r\n      isValid = false\r\n    }\r\n\r\n    // O telefone não pode ser string vazia nem conter sublinhado\r\n    if (data.telefone.trim() === '' || data.telefone.includes('_')) {\r\n      errorTemp.telefone = 'O telefone deve ser preenchido corretamente'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.email.trim() === '') {\r\n      errorTemp.email = 'O e-mail deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    setError(errorTemp)\r\n    return isValid\r\n  }\r\n\r\n  async function saveData() {\r\n    try {\r\n      // Desabilita o botão de enviar para evitar envios duplicados\r\n      setSendBtnStatus({ disabled: true, label: 'Enviando...' })\r\n\r\n      // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\r\n      if (params.id) await axios.put(`https://api.faustocintra.com.br/clientes/${params.id}`, cliente)\r\n      // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado será o POST\r\n      else await axios.post('https://api.faustocintra.com.br/clientes', cliente)\r\n\r\n      // Mostra a SnackBar\r\n      setSbStatus({ open: true, severity: 'success', message: 'Dados salvos com sucesso!' })\r\n\r\n    }\r\n    catch (error) {\r\n      // Mostra a SnackBar\r\n      setSbStatus({ open: true, severity: 'error', message: 'ERRO: ' + error.message })\r\n    }\r\n    // Restaura o estado inicial do botão de envio\r\n    setSendBtnStatus({ disabled: false, label: 'Enviar' })\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n\r\n    event.preventDefault()    // Evita que a página seja recarregada\r\n\r\n    // Só envia para o banco de dados se o formulário for válido\r\n    if (validate(cliente)) saveData()\r\n\r\n  }\r\n\r\n  function handleSbClose() {\r\n    setSbStatus({ ...sbStatus, open: false })\r\n\r\n    // Retorna para a página de listagem em caso de sucesso\r\n    if (sbStatus.severity === 'success') history.push('/list')\r\n  }\r\n\r\n  function handleDialogClose(result) {\r\n    setDialogOpen(false)\r\n\r\n    // Se o usuário realmente deseja voltar\r\n    if (result) history.push('/list')\r\n  }\r\n\r\n  function handleGoBack() {\r\n    // se o formulário tiver sido modificado, exibimos o diálogo de confirmação\r\n    if (isModified) setDialogOpen(true)\r\n    // Senão, podemos voltar diretamente para a listagem\r\n    else history.push('/list')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ConfirmDialog isOpen={dialogOpen} onClose={handleDialogClose}>\r\n        Há dados não salvos. Deseja realmente voltar?\r\n      </ConfirmDialog>\r\n\r\n      <Snackbar open={sbStatus.open} autoHideDuration={6000} onClose={handleSbClose}>\r\n        <MuiAlert elevation={6} variant=\"filled\" onClose={handleSbClose} severity={sbStatus.severity}>\r\n          {sbStatus.message}\r\n        </MuiAlert>\r\n      </Snackbar>\r\n\r\n      <h1>{title}</h1>\r\n      <form className={classes.form} onSubmit={handleSubmit}>\r\n\r\n        <TextField\r\n          id=\"nome\"\r\n          label=\"Nome\"\r\n          variant=\"filled\"\r\n          value={cliente.nome}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o nome do cliente\"\r\n          fullWidth\r\n          error={error.nome !== ''}\r\n          helperText={error.nome}\r\n        />\r\n\r\n        <InputMask\r\n          id=\"cpf\"\r\n          mask={cpfMask}\r\n          formatChars={formatChars}\r\n          value={cliente.cpf}\r\n          onChange={(event) => handleInputChange(event, 'cpf')}\r\n        >\r\n          {() => <TextField\r\n            label=\"CPF\"\r\n            variant=\"filled\"\r\n            required  /* not null, precisa ser preenchido */\r\n            placeholder=\"Informe o CPF do cliente\"\r\n            fullWidth\r\n            error={error.cpf !== ''}\r\n            helperText={error.cpf}\r\n          />}\r\n        </InputMask>\r\n\r\n        <InputMask\r\n          id=\"rg\"\r\n          mask={rgMask}\r\n          formatChars={formatChars}\r\n          value={cliente.rg}\r\n          onChange={(event) => handleInputChange(event, 'rg')}\r\n        >\r\n          {() => <TextField\r\n            label=\"RG\"\r\n            variant=\"filled\"\r\n            required  /* not null, precisa ser preenchido */\r\n            placeholder=\"Informe o RG do cliente\"\r\n            fullWidth\r\n            error={error.rg !== ''}\r\n            helperText={error.rg}\r\n          />}\r\n        </InputMask>\r\n\r\n        <TextField\r\n          id=\"logradouro\"\r\n          label=\"Logradouro\"\r\n          variant=\"filled\"\r\n          value={cliente.logradouro}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o logradouro do cliente\"\r\n          fullWidth\r\n          error={error.logradouro !== ''}\r\n          helperText={error.logradouro}\r\n        />\r\n\r\n        <TextField\r\n          id=\"num_imovel\"\r\n          label=\"Número do imóvel\"\r\n          variant=\"filled\"\r\n          value={cliente.num_imovel}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o número do imóvel\"\r\n          fullWidth\r\n          error={error.num_imovel !== ''}\r\n          helperText={error.num_imovel}\r\n        />\r\n\r\n        <TextField\r\n          id=\"complemento\"\r\n          label=\"Complemento\"\r\n          variant=\"filled\"\r\n          value={cliente.complemento}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Informe o Complemento, se houver\"\r\n          fullWidth\r\n          error={error.complemento !== ''}\r\n          helperText={error.complemento}\r\n        />\r\n\r\n        <TextField\r\n          id=\"bairro\"\r\n          label=\"Bairro\"\r\n          variant=\"filled\"\r\n          value={cliente.bairro}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o bairro\"\r\n          fullWidth\r\n          error={error.bairro !== ''}\r\n          helperText={error.bairro}\r\n        />\r\n\r\n        <TextField\r\n          id=\"municipio\"\r\n          label=\"Município\"\r\n          variant=\"filled\"\r\n          value={cliente.municipio}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o município\"\r\n          fullWidth\r\n          error={error.municipio !== ''}\r\n          helperText={error.municipio}\r\n        />\r\n\r\n        <TextField\r\n          id=\"uf\"\r\n          label=\"UF\"\r\n          variant=\"filled\"\r\n          value={cliente.uf}\r\n          onChange={event => handleInputChange(event, 'uf')}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe a UF do município\"\r\n          select\r\n          fullWidth\r\n          error={error.uf !== ''}\r\n          helperText={error.uf}\r\n        >\r\n          {ufs.map(uf => <MenuItem value={uf} key={uf}>{uf}</MenuItem>)}\r\n        </TextField>\r\n\r\n\r\n        <InputMask\r\n          id=\"telefone\"\r\n          mask={telMask}\r\n          formatChars={formatChars}\r\n          value={cliente.telefone}\r\n          onChange={(event) => handleInputChange(event, 'telefone')}\r\n        >\r\n          {() => <TextField\r\n            label=\"telefone\"\r\n            variant=\"filled\"\r\n            required  /* not null, precisa ser preenchido */\r\n            placeholder=\"Informe o telefone do cliente\"\r\n            fullWidth\r\n            error={error.telefone !== ''}\r\n            helperText={error.telefone}\r\n          />}\r\n        </InputMask>\r\n\r\n        <TextField\r\n          id=\"email\"\r\n          label=\"E-mail\"\r\n          variant=\"filled\"\r\n          value={cliente.email}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o e-mail do cliente\"\r\n          fullWidth\r\n          error={error.email !== ''}\r\n          helperText={error.email}\r\n        />\r\n\r\n        <Toolbar className={classes.toolbar}>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={sendBtnStatus.disabled}>\r\n            {sendBtnStatus.label}\r\n          </Button>\r\n          <Button variant=\"contained\" onClick={handleGoBack}>Voltar</Button>\r\n        </Toolbar>\r\n\r\n        {/*    \r\n        <div>\r\n          {JSON.stringify(cliente)}\r\n          <br />\r\n          currentId: {JSON.stringify(currentId)}\r\n          <br />\r\n          isModified: {JSON.stringify(isModified)}\r\n        </div>\r\n      */}\r\n      </form>\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}