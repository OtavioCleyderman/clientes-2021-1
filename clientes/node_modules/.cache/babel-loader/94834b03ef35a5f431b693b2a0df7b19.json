{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Otavio\\\\Documents\\\\GitHub\\\\clientes-2021-1\\\\clientes\\\\src\\\\routed\\\\ClientesForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputMask from 'react-input-mask';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    flexWrap: 'wrap',\n    maxWidth: '80%',\n    margin: '0 auto',\n    '& .MuiFormControl-root': {\n      minWidth: '200px',\n      maxWidth: '500px',\n      margin: '0 24px 24px 0'\n    }\n  },\n  toolbar: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-around',\n    marginTop: '36px'\n  },\n  importado: {\n    '& .MuiFormControlLabel-root': {\n      display: 'block'\n    }\n  }\n}));\nexport default function ClientesForm() {\n  _s();\n\n  const classes = useStyles();\n  const uf = ['Acre', 'Alagoas', 'Amapá', 'Amazonas', 'Bahia', 'Ceará', 'Distrito Federal', 'Espírito Santo', 'Goiás', 'Maranhão', 'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Pará', 'Paraíba', 'Paraná', 'Pernambuco', 'Piauí', 'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 'Rondônia', 'Roraima', 'Santa Catarina', 'São Paulo', 'Sergipe', 'Tocantins'];\n  const years = [];\n\n  for (let i = new Date().getFullYear(); i >= 1900; i--) years.push(i); // Classes de caracters para a máscara da placa\n  // 1) Três primeiras posições, somente letras (maiúsculas ou minúsculas) ~> [A-Za-z]\n  // 2) Quinta, sétima e oitava posições, somente dígitos ~> [0-9]\n  // 3) Sexta posição: dígitos ou letras (maiúsculas ou minúsculas) de A a J ~> [0-9A-Ja-j]\n\n\n  const formatChars = {\n    'A': '[A-Za-z]',\n    '0': '[0-9]',\n    '#': '[0-9A-Ja-j]'\n  }; // Máscara de entrada para a placa\n\n  const placaMask = 'AAA-0#00'; // Máscara para CPF: '000.000.000-00'\n  // Máscara para CNPJ: '00.000.000/0000-00'\n\n  const [karango, setKarango] = useState({\n    id: null,\n    marca: '',\n    modelo: '',\n    cor: '',\n    ano_fabricacao: new Date().getFullYear(),\n    // Ano corrente\n    importado: '0',\n    placa: '',\n    preco: 0\n  });\n  const [importadoChecked, setImportadoChecked] = useState(false);\n  const [sendBtnStatus, setSendBtnStatus] = useState({\n    disabled: false,\n    label: 'Enviar'\n  });\n  const [sbStatus, setSbStatus] = useState({\n    open: false,\n    severity: 'success',\n    message: ''\n  });\n  const [error, setError] = useState({\n    marca: '',\n    modelo: '',\n    cor: '',\n    placa: '',\n    preco: ''\n  });\n  const [isModified, setIsModified] = useState(false);\n  const [title, setTitle] = useState('Cadastrar novo karango');\n  const history = useHistory();\n  const params = useParams(); // useEffect() para quando o formulário for carregado (só na inicialização)\n\n  useEffect(() => {\n    // Verificamos se a rota atual contém o parâmetro id\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\n    if (params.id) {\n      setTitle('Editar Karango');\n      getData(params.id);\n    }\n  }, []);\n\n  async function getData(id) {\n    try {\n      let response = await axios.get(`https://api.faustocintra.com.br/karangos/${id}`);\n      setKarango(response.data);\n    } catch (error) {\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: \"Não foi possível carregar os dados para edição.\"\n      });\n    }\n  }\n\n  const [dialogOpen, setDialogOpen] = useState(false); // O diálogo de confirmação está aberto?\n\n  function handleInputChange(event, property) {\n    const karangoTemp = { ...karango\n    };\n    if (event.target.id) property = event.target.id;\n\n    if (property === 'importado') {\n      const newState = !importadoChecked; // Inverte o valor\n\n      if (newState) karangoTemp.importado = '1';else karangoTemp.importado = '0';\n      setImportadoChecked(newState);\n    } else if (property === 'placa') {\n      karangoTemp.placa = event.target.value.toUpperCase();\n    } else {\n      // Quando o nome de uma propriedade de objeto aparece entre [],\n      // significa que o nome da propriedade será determinado pela\n      // variável ou expressão contida dentro dos colchetes\n      karangoTemp[property] = event.target.value;\n    }\n\n    setKarango(karangoTemp);\n    setIsModified(true); // O formulário foi modificado\n\n    validate(karangoTemp); // Dispara a validação\n  }\n\n  function validate(data) {\n    let isValid = true;\n    const errorTemp = {\n      marca: '',\n      modelo: '',\n      cor: '',\n      placa: '',\n      preco: ''\n    }; // trim(): retira espaços em branco do início e do final de uma string\n\n    if (data.marca.trim() === '') {\n      errorTemp.marca = 'A marca deve ser preenchida';\n      isValid = false;\n    }\n\n    if (data.modelo.trim() === '') {\n      errorTemp.modelo = 'O modelo deve ser preenchido';\n      isValid = false;\n    }\n\n    if (data.cor.trim() === '') {\n      errorTemp.cor = 'A cor deve ser informada';\n      isValid = false;\n    } // A placa não pode ser string vazia nem conter sublinhado\n\n\n    if (data.placa.trim() === '' || data.placa.includes('_')) {\n      errorTemp.placa = 'A placa deve ser preenchida corretamente';\n      isValid = false;\n    } // O preço deve ser numérico e maior que zero\n\n\n    if (isNaN(data.preco) || Number(data.preco) <= 0) {\n      errorTemp.preco = 'O preço deve ser informado e maior que zero';\n      isValid = false;\n    }\n\n    setError(errorTemp);\n    return isValid;\n  }\n\n  async function saveData() {\n    try {\n      // Desabilita o botão de enviar para evitar envios duplicados\n      setSendBtnStatus({\n        disabled: true,\n        label: 'Enviando...'\n      }); // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\n\n      if (params.id) await axios.put(`https://api.faustocintra.com.br/karangos/${params.id}`, karango); // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado será o POST\n      else await axios.post('https://api.faustocintra.com.br/karangos', karango); // Mostra a SnackBar\n\n      setSbStatus({\n        open: true,\n        severity: 'success',\n        message: 'Dados salvos com sucesso!'\n      });\n    } catch (error) {\n      // Mostra a SnackBar\n      setSbStatus({\n        open: true,\n        severity: 'error',\n        message: 'ERRO: ' + error.message\n      });\n    } // Restaura o estado inicial do botão de envio\n\n\n    setSendBtnStatus({\n      disabled: false,\n      label: 'Enviar'\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault(); // Evita que a página seja recarregada\n    // Só envia para o banco de dados se o formulário for válido\n\n    if (validate(karango)) saveData();\n  }\n\n  function handleSbClose() {\n    setSbStatus({ ...sbStatus,\n      open: false\n    }); // Retorna para a página de listagem em caso de sucesso\n\n    if (sbStatus.severity === 'success') history.push('/list');\n  }\n\n  function handleDialogClose(result) {\n    setDialogOpen(false); // Se o usuário realmente deseja voltar\n\n    if (result) history.push('/list');\n  }\n\n  function handleGoBack() {\n    // se o formulário tiver sido modificado, exibimos o diálogo de confirmação\n    if (isModified) setDialogOpen(true); // Senão, podemos voltar diretamente para a listagem\n    else history.push('/list');\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      isOpen: dialogOpen,\n      onClose: handleDialogClose,\n      children: \"H\\xE1 dados n\\xE3o salvos. Deseja realmente voltar?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: sbStatus.open,\n      autoHideDuration: 6000,\n      onClose: handleSbClose,\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        elevation: 6,\n        variant: \"filled\",\n        onClose: handleSbClose,\n        severity: sbStatus.severity,\n        children: sbStatus.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"marca\",\n        label: \"Marca\",\n        variant: \"filled\",\n        value: karango.marca,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe a marca do ve\\xEDculo\",\n        fullWidth: true,\n        error: error.marca !== '',\n        helperText: error.marca\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"modelo\",\n        label: \"Modelo\",\n        variant: \"filled\",\n        value: karango.modelo,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o modelo do ve\\xEDculo\",\n        fullWidth: true,\n        error: error.modelo !== '',\n        helperText: error.modelo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"cor\",\n        label: \"Cor\",\n        variant: \"filled\",\n        value: karango.cor,\n        onChange: event => handleInputChange(event, 'cor'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe a cor do ve\\xEDculo\",\n        select: true,\n        fullWidth: true,\n        error: error.cor !== '',\n        helperText: error.cor,\n        children: colors.map(color => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: color,\n          children: color\n        }, color, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 32\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"ano_fabricacao\",\n        label: \"Ano de fabrica\\xE7\\xE3o\",\n        variant: \"filled\",\n        value: karango.ano_fabricacao,\n        onChange: event => handleInputChange(event, 'ano_fabricacao'),\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o ano de fabrica\\xE7\\xE3o do ve\\xEDculo\",\n        select: true,\n        fullWidth: true,\n        children: years.map(year => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: year,\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 30\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputMask, {\n        id: \"placa\",\n        mask: placaMask,\n        formatChars: formatChars,\n        value: karango.placa,\n        onChange: event => handleInputChange(event, 'placa'),\n        children: () => /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Placa\",\n          variant: \"filled\",\n          required: true\n          /* not null, precisa ser preenchido */\n          ,\n          placeholder: \"Informe a placa do ve\\xEDculo\",\n          fullWidth: true,\n          error: error.placa !== '',\n          helperText: error.placa\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"preco\",\n        label: \"Pre\\xE7o\",\n        variant: \"filled\",\n        value: karango.preco,\n        onChange: handleInputChange,\n        required: true\n        /* not null, precisa ser preenchido */\n        ,\n        placeholder: \"Informe o valor do ve\\xEDculo\",\n        fullWidth: true,\n        type: \"number\",\n        onFocus: event => event.target.select() // Seleciona o conteúdo ao focar\n        ,\n        InputProps: {\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: \"R$\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this)\n        },\n        error: error.preco !== '',\n        helperText: error.preco\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        className: classes.importado,\n        fullWidth: true,\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            id: \"importado\",\n            checked: importadoChecked,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this),\n          label: \"Importado?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolbar,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: sendBtnStatus.disabled,\n          children: sendBtnStatus.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: handleGoBack,\n          children: \"Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClientesForm, \"tJ2OBE98nkX0Q8f/i+95FMR5Ea4=\", false, function () {\n  return [useStyles, useHistory, useParams];\n});\n\n_c = ClientesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientesForm\");","map":{"version":3,"sources":["C:/Users/Otavio/Documents/GitHub/clientes-2021-1/clientes/src/routed/ClientesForm.js"],"names":["useState","useEffect","TextField","MenuItem","FormControl","FormControlLabel","Checkbox","InputMask","makeStyles","InputAdornment","Toolbar","Button","axios","useHistory","useParams","Snackbar","MuiAlert","ConfirmDialog","React","useStyles","theme","form","display","justifyContent","flexWrap","maxWidth","margin","minWidth","toolbar","width","marginTop","importado","ClientesForm","classes","uf","years","i","Date","getFullYear","push","formatChars","placaMask","karango","setKarango","id","marca","modelo","cor","ano_fabricacao","placa","preco","importadoChecked","setImportadoChecked","sendBtnStatus","setSendBtnStatus","disabled","label","sbStatus","setSbStatus","open","severity","message","error","setError","isModified","setIsModified","title","setTitle","history","params","getData","response","get","data","dialogOpen","setDialogOpen","handleInputChange","event","property","karangoTemp","target","newState","value","toUpperCase","validate","isValid","errorTemp","trim","includes","isNaN","Number","saveData","put","post","handleSubmit","preventDefault","handleSbClose","handleDialogClose","result","handleGoBack","colors","map","color","year","select","startAdornment"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport InputMask from 'react-input-mask'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Button from '@material-ui/core/Button'\r\nimport axios from 'axios'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert from '@material-ui/lab/Alert'\r\nimport ConfirmDialog from '../ui/ConfirmDialog'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  form: {\r\n    display: 'flex',\r\n    justifyContent: 'space-around',\r\n    flexWrap: 'wrap',\r\n    maxWidth: '80%',\r\n    margin: '0 auto',\r\n    '& .MuiFormControl-root': {\r\n      minWidth: '200px',\r\n      maxWidth: '500px',\r\n      margin: '0 24px 24px 0'\r\n    }\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    width: '100%',\r\n    justifyContent: 'space-around',\r\n    marginTop: '36px'\r\n  },\r\n  importado: {\r\n    '& .MuiFormControlLabel-root': {\r\n      display: 'block'\r\n    }\r\n  }\r\n\r\n}))\r\n\r\nexport default function ClientesForm() {\r\n  const classes = useStyles()\r\n\r\n  const uf = [\r\n    'Acre',\r\n    'Alagoas',\r\n    'Amapá',\r\n    'Amazonas',\r\n    'Bahia',\r\n    'Ceará',\r\n    'Distrito Federal',\r\n    'Espírito Santo',\r\n    'Goiás',\r\n    'Maranhão',\r\n    'Mato Grosso',\r\n    'Mato Grosso do Sul',\r\n    'Minas Gerais',\r\n    'Pará',\r\n    'Paraíba',\r\n    'Paraná',\r\n    'Pernambuco',\r\n    'Piauí',\r\n    'Rio de Janeiro',\r\n    'Rio Grande do Norte',\r\n    'Rio Grande do Sul',\r\n    'Rondônia',\r\n    'Roraima',\r\n    'Santa Catarina',\r\n    'São Paulo',\r\n    'Sergipe',\r\n    'Tocantins',\r\n  ]\r\n\r\n  const years = []\r\n  for (let i = (new Date()).getFullYear(); i >= 1900; i--) years.push(i)\r\n\r\n  // Classes de caracters para a máscara da placa\r\n  // 1) Três primeiras posições, somente letras (maiúsculas ou minúsculas) ~> [A-Za-z]\r\n  // 2) Quinta, sétima e oitava posições, somente dígitos ~> [0-9]\r\n  // 3) Sexta posição: dígitos ou letras (maiúsculas ou minúsculas) de A a J ~> [0-9A-Ja-j]\r\n  const formatChars = {\r\n    'A': '[A-Za-z]',\r\n    '0': '[0-9]',\r\n    '#': '[0-9A-Ja-j]'\r\n  }\r\n\r\n  // Máscara de entrada para a placa\r\n  const placaMask = 'AAA-0#00'\r\n\r\n  // Máscara para CPF: '000.000.000-00'\r\n  // Máscara para CNPJ: '00.000.000/0000-00'\r\n\r\n  const [karango, setKarango] = useState({\r\n    id: null,\r\n    marca: '',\r\n    modelo: '',\r\n    cor: '',\r\n    ano_fabricacao: (new Date()).getFullYear(),    // Ano corrente\r\n    importado: '0',\r\n    placa: '',\r\n    preco: 0\r\n  })\r\n\r\n\r\n  const [importadoChecked, setImportadoChecked] = useState(false)\r\n\r\n  const [sendBtnStatus, setSendBtnStatus] = useState({\r\n    disabled: false,\r\n    label: 'Enviar'\r\n  })\r\n\r\n  const [sbStatus, setSbStatus] = useState({\r\n    open: false,\r\n    severity: 'success',\r\n    message: ''\r\n  })\r\n\r\n  const [error, setError] = useState({\r\n    marca: '',\r\n    modelo: '',\r\n    cor: '',\r\n    placa: '',\r\n    preco: ''\r\n  })\r\n\r\n  const [isModified, setIsModified] = useState(false)\r\n\r\n  const [title, setTitle] = useState('Cadastrar novo karango')\r\n\r\n  const history = useHistory()\r\n  const params = useParams()\r\n\r\n  // useEffect() para quando o formulário for carregado (só na inicialização)\r\n  useEffect(() => {\r\n    // Verificamos se a rota atual contém o parâmetro id\r\n    // Em caso positivo, buscamos os dados no back-end e carregamos o formulário para edição\r\n    if (params.id) {\r\n      setTitle('Editar Karango')\r\n      getData(params.id)\r\n    }\r\n  }, [])\r\n\r\n  async function getData(id) {\r\n    try {\r\n      let response = await axios.get(`https://api.faustocintra.com.br/karangos/${id}`)\r\n      setKarango(response.data)\r\n    }\r\n    catch (error) {\r\n      setSbStatus({\r\n        open: true,\r\n        severity: 'error',\r\n        message: \"Não foi possível carregar os dados para edição.\"\r\n      })\r\n    }\r\n  }\r\n\r\n  const [dialogOpen, setDialogOpen] = useState(false) // O diálogo de confirmação está aberto?\r\n\r\n\r\n  function handleInputChange(event, property) {\r\n\r\n    const karangoTemp = { ...karango }\r\n\r\n\r\n    if (event.target.id) property = event.target.id\r\n\r\n    if (property === 'importado') {\r\n      const newState = !importadoChecked // Inverte o valor\r\n      if (newState) karangoTemp.importado = '1'\r\n      else karangoTemp.importado = '0'\r\n      setImportadoChecked(newState)\r\n    }\r\n    else if (property === 'placa') {\r\n      karangoTemp.placa = event.target.value.toUpperCase()\r\n    }\r\n    else {\r\n      // Quando o nome de uma propriedade de objeto aparece entre [],\r\n      // significa que o nome da propriedade será determinado pela\r\n      // variável ou expressão contida dentro dos colchetes\r\n      karangoTemp[property] = event.target.value\r\n    }\r\n    setKarango(karangoTemp)\r\n    setIsModified(true)   // O formulário foi modificado\r\n    validate(karangoTemp)  // Dispara a validação\r\n  }\r\n\r\n  function validate(data) {\r\n    let isValid = true\r\n\r\n    const errorTemp = {\r\n      marca: '',\r\n      modelo: '',\r\n      cor: '',\r\n      placa: '',\r\n      preco: ''\r\n    }\r\n\r\n    // trim(): retira espaços em branco do início e do final de uma string\r\n    if (data.marca.trim() === '') {\r\n      errorTemp.marca = 'A marca deve ser preenchida'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.modelo.trim() === '') {\r\n      errorTemp.modelo = 'O modelo deve ser preenchido'\r\n      isValid = false\r\n    }\r\n\r\n    if (data.cor.trim() === '') {\r\n      errorTemp.cor = 'A cor deve ser informada'\r\n      isValid = false\r\n    }\r\n\r\n    // A placa não pode ser string vazia nem conter sublinhado\r\n    if (data.placa.trim() === '' || data.placa.includes('_')) {\r\n      errorTemp.placa = 'A placa deve ser preenchida corretamente'\r\n      isValid = false\r\n    }\r\n\r\n    // O preço deve ser numérico e maior que zero\r\n    if (isNaN(data.preco) || Number(data.preco) <= 0) {\r\n      errorTemp.preco = 'O preço deve ser informado e maior que zero'\r\n      isValid = false\r\n    }\r\n\r\n    setError(errorTemp)\r\n    return isValid\r\n  }\r\n\r\n  async function saveData() {\r\n    try {\r\n      // Desabilita o botão de enviar para evitar envios duplicados\r\n      setSendBtnStatus({ disabled: true, label: 'Enviando...' })\r\n\r\n      // Se estivermos editando, precisamos enviar os dados com o verbo HTTP PUT\r\n      if (params.id) await axios.put(`https://api.faustocintra.com.br/karangos/${params.id}`, karango)\r\n      // Senão, estaremos criando um novo registro, e o verbo HTTP a ser usado será o POST\r\n      else await axios.post('https://api.faustocintra.com.br/karangos', karango)\r\n\r\n      // Mostra a SnackBar\r\n      setSbStatus({ open: true, severity: 'success', message: 'Dados salvos com sucesso!' })\r\n\r\n    }\r\n    catch (error) {\r\n      // Mostra a SnackBar\r\n      setSbStatus({ open: true, severity: 'error', message: 'ERRO: ' + error.message })\r\n    }\r\n    // Restaura o estado inicial do botão de envio\r\n    setSendBtnStatus({ disabled: false, label: 'Enviar' })\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n\r\n    event.preventDefault()    // Evita que a página seja recarregada\r\n\r\n    // Só envia para o banco de dados se o formulário for válido\r\n    if (validate(karango)) saveData()\r\n\r\n  }\r\n\r\n  function handleSbClose() {\r\n    setSbStatus({ ...sbStatus, open: false })\r\n\r\n    // Retorna para a página de listagem em caso de sucesso\r\n    if (sbStatus.severity === 'success') history.push('/list')\r\n  }\r\n\r\n  function handleDialogClose(result) {\r\n    setDialogOpen(false)\r\n\r\n    // Se o usuário realmente deseja voltar\r\n    if (result) history.push('/list')\r\n  }\r\n\r\n  function handleGoBack() {\r\n    // se o formulário tiver sido modificado, exibimos o diálogo de confirmação\r\n    if (isModified) setDialogOpen(true)\r\n    // Senão, podemos voltar diretamente para a listagem\r\n    else history.push('/list')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ConfirmDialog isOpen={dialogOpen} onClose={handleDialogClose}>\r\n        Há dados não salvos. Deseja realmente voltar?\r\n      </ConfirmDialog>\r\n\r\n      <Snackbar open={sbStatus.open} autoHideDuration={6000} onClose={handleSbClose}>\r\n        <MuiAlert elevation={6} variant=\"filled\" onClose={handleSbClose} severity={sbStatus.severity}>\r\n          {sbStatus.message}\r\n        </MuiAlert>\r\n      </Snackbar>\r\n\r\n      <h1>{title}</h1>\r\n      <form className={classes.form} onSubmit={handleSubmit}>\r\n\r\n        <TextField\r\n          id=\"marca\"\r\n          label=\"Marca\"\r\n          variant=\"filled\"\r\n          value={karango.marca}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe a marca do veículo\"\r\n          fullWidth\r\n          error={error.marca !== ''}\r\n          helperText={error.marca}\r\n        />\r\n\r\n        <TextField\r\n          id=\"modelo\"\r\n          label=\"Modelo\"\r\n          variant=\"filled\"\r\n          value={karango.modelo}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o modelo do veículo\"\r\n          fullWidth\r\n          error={error.modelo !== ''}\r\n          helperText={error.modelo}\r\n        />\r\n\r\n        <TextField\r\n          id=\"cor\"\r\n          label=\"Cor\"\r\n          variant=\"filled\"\r\n          value={karango.cor}\r\n          onChange={event => handleInputChange(event, 'cor')}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe a cor do veículo\"\r\n          select\r\n          fullWidth\r\n          error={error.cor !== ''}\r\n          helperText={error.cor}\r\n        >\r\n          {colors.map(color => <MenuItem value={color} key={color}>{color}</MenuItem>)}\r\n        </TextField>\r\n\r\n        <TextField\r\n          id=\"ano_fabricacao\"\r\n          label=\"Ano de fabricação\"\r\n          variant=\"filled\"\r\n          value={karango.ano_fabricacao}\r\n          onChange={event => handleInputChange(event, 'ano_fabricacao')}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o ano de fabricação do veículo\"\r\n          select\r\n          fullWidth\r\n        >\r\n          {years.map(year => <MenuItem value={year} key={year}>{year}</MenuItem>)}\r\n        </TextField>\r\n\r\n\r\n        <InputMask\r\n          id=\"placa\"\r\n          mask={placaMask}\r\n          formatChars={formatChars}\r\n          value={karango.placa}\r\n          onChange={(event) => handleInputChange(event, 'placa')}\r\n        >\r\n          {() => <TextField\r\n            label=\"Placa\"\r\n            variant=\"filled\"\r\n            required  /* not null, precisa ser preenchido */\r\n            placeholder=\"Informe a placa do veículo\"\r\n            fullWidth\r\n            error={error.placa !== ''}\r\n            helperText={error.placa}\r\n          />}\r\n        </InputMask>\r\n\r\n        <TextField\r\n          id=\"preco\"\r\n          label=\"Preço\"\r\n          variant=\"filled\"\r\n          value={karango.preco}\r\n          onChange={handleInputChange}\r\n          required  /* not null, precisa ser preenchido */\r\n          placeholder=\"Informe o valor do veículo\"\r\n          fullWidth\r\n          type=\"number\"\r\n          onFocus={event => event.target.select()}  // Seleciona o conteúdo ao focar\r\n          InputProps={{\r\n            startAdornment: <InputAdornment position=\"start\">R$</InputAdornment>,\r\n          }}\r\n          error={error.preco !== ''}\r\n          helperText={error.preco}\r\n        />\r\n\r\n        <FormControl className={classes.importado} fullWidth>\r\n          <FormControlLabel control={\r\n            <Checkbox\r\n              id=\"importado\"\r\n              checked={importadoChecked}\r\n              onChange={handleInputChange}\r\n            />\r\n          }\r\n            label=\"Importado?\"\r\n          />\r\n        </FormControl>\r\n\r\n        <Toolbar className={classes.toolbar}>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={sendBtnStatus.disabled}>\r\n            {sendBtnStatus.label}\r\n          </Button>\r\n          <Button variant=\"contained\" onClick={handleGoBack}>Voltar</Button>\r\n        </Toolbar>\r\n\r\n        {/*    \r\n        <div>\r\n          {JSON.stringify(karango)}\r\n          <br />\r\n          currentId: {JSON.stringify(currentId)}\r\n          <br />\r\n          isModified: {JSON.stringify(isModified)}\r\n        </div>\r\n      */}\r\n      </form>\r\n    </>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}